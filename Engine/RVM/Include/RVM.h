//
// Created by kiper220 on 19.05.2020.
//

#ifndef EVOENGINE_RVM_H
#define EVOENGINE_RVM_H

#define RINSTRUCTION__(data)\
    RV ## data,    \
    EV ## data,    \
    V ## data,     \
    V ## data ## L,

namespace EvoEngine{
    namespace RVM{
        enum class Instruction{
            RAX,                        // 64 Битный свободный регистр
            EAX,                        // 32 Битный свободный регистр
            AX,                         // 16 Битный свободный регистр
            AL,                         // 8  Битный свободный регистр
            AH,                         // 8  Битный свободный регистр

            RBX,                        // 64 Битный свободный регистр
            EBX,                        // 32 Битный свободный регистр
            BX,                         // 16 Битный свободный регистр
            BL,                         // 8  Битный свободный регистр
            BH,                         // 8  Битный свободный регистр

            RCX,                        // 64 Битный свободный регистр
            ECX,                        // 32 Битный свободный регистр
            CX,                         // 16 Битный свободный регистр
            CL,                         // 8  Битный свободный регистр
            CH,                         // 8  Битный свободный регистр

            RDX,                        // 64 Битный свободный регистр
            EDX,                        // 32 Битный свободный регистр
            DX,                         // 16 Битный свободный регистр
            DL,                         // 8  Битный свободный регистр
            DH,                         // 8  Битный свободный регистр

            RBP,                        // 64 Битный регистр управления локальным стеком (начало локального пространства на виртуальной памяти)
            EBP,                        // 32 Битный регистр управления локальным стеком (начало локального стека на виртуальной памяти)
            BP,                         // 16 Битный регистр управления локальным стеком (начало локального стека на виртуальной памяти)
            BPL,                        // 8  Битный регистр управления локальным стеком (начало локального стека на виртуальной памяти)

            RSI,                        // 64 Битный свободный регистр
            ESI,                        // 32 Битный свободный регистр
            SI,                         // 16 Битный свободный регистр
            SIL,                        // 8  Битный свободный регистр

            RDI,                        // 64 Битный свободный регистр
            EDI,                        // 32 Битный свободный регистр
            DI,                         // 16 Битный свободный регистр
            DIL,                        // 8  Битный свободный регистр

            RSP,                        // 64 Битный регистр управления локальным стеком (начало локального стека на виртуальной памяти)
            ESP,                        // 32 Битный регистр управления локальным стеком (начало локального стека на виртуальной памяти)
            SP,                         // 16 Битный регистр управления локальным стеком (начало локального стека на виртуальной памяти)
            SPL,                        // 8  Битный регистр управления локальным стеком (начало локального стека на виртуальной памяти)

            RINSTRUCTION__(0)   // 64 Битный свободный вирутальный регистр
            RINSTRUCTION__(1)   // 64 Битный свободный вирутальный регистр
            RINSTRUCTION__(2)   // 64 Битный свободный вирутальный регистр
            RINSTRUCTION__(3)   // 64 Битный свободный вирутальный регистр
            RINSTRUCTION__(4)   // 64 Битный свободный вирутальный регистр
            RINSTRUCTION__(5)   // 64 Битный свободный вирутальный регистр
            RINSTRUCTION__(6)   // 64 Битный свободный вирутальный регистр
            RINSTRUCTION__(7)   // 64 Битный свободный вирутальный регистр
            RINSTRUCTION__(8)   // 64 Битный свободный вирутальный регистр
            RINSTRUCTION__(9)   // 64 Битный свободный вирутальный регистр
            RINSTRUCTION__(10)  // 64 Битный свободный вирутальный регистр
            RINSTRUCTION__(11)  // 64 Битный свободный вирутальный регистр
            RINSTRUCTION__(12)  // 64 Битный свободный вирутальный регистр
            RINSTRUCTION__(13)  // 64 Битный свободный вирутальный регистр
            RINSTRUCTION__(14)  // 64 Битный свободный вирутальный регистр
            RINSTRUCTION__(15)  // 64 Битный свободный вирутальный регистр
            RINSTRUCTION__(16)  // 64 Битный свободный вирутальный регистр
            RINSTRUCTION__(17)  // 64 Битный свободный вирутальный регистр
            RINSTRUCTION__(18)  // 64 Битный свободный вирутальный регистр
            RINSTRUCTION__(19)  // 64 Битный свободный вирутальный регистр
            RINSTRUCTION__(20)  // 64 Битный свободный вирутальный регистр
            RINSTRUCTION__(21)  // 64 Битный свободный вирутальный регистр
            RINSTRUCTION__(22)  // 64 Битный свободный вирутальный регистр
            RINSTRUCTION__(23)  // 64 Битный свободный вирутальный регистр
            RINSTRUCTION__(24)  // 64 Битный свободный вирутальный регистр
            RINSTRUCTION__(25)  // 64 Битный свободный вирутальный регистр
            RINSTRUCTION__(26)  // 64 Битный свободный вирутальный регистр
            RINSTRUCTION__(27)  // 64 Битный свободный вирутальный регистр
            RINSTRUCTION__(28)  // 64 Битный свободный вирутальный регистр
            RINSTRUCTION__(29)  // 64 Битный свободный вирутальный регистр
            RINSTRUCTION__(30)  // 64 Битный свободный вирутальный регистр
            RINSTRUCTION__(31)  // 64 Битный свободный вирутальный регистр
            RINSTRUCTION__(32)  // 64 Битный свободный вирутальный регистр
            RINSTRUCTION__(34)  // 64 Битный свободный вирутальный регистр
            RINSTRUCTION__(35)  // 64 Битный свободный вирутальный регистр
            RINSTRUCTION__(36)  // 64 Битный свободный вирутальный регистр
            RINSTRUCTION__(37)  // 64 Битный свободный вирутальный регистр
            RINSTRUCTION__(38)  // 64 Битный свободный вирутальный регистр
            RINSTRUCTION__(39)  // 64 Битный свободный вирутальный регистр
            RINSTRUCTION__(40)  // 64 Битный свободный вирутальный регистр
            RINSTRUCTION__(41)  // 64 Битный свободный вирутальный регистр
            RINSTRUCTION__(42)  // 64 Битный свободный вирутальный регистр
            RINSTRUCTION__(43)  // 64 Битный свободный вирутальный регистр
            RINSTRUCTION__(44)  // 64 Битный свободный вирутальный регистр
            RINSTRUCTION__(45)  // 64 Битный свободный вирутальный регистр
            RINSTRUCTION__(46)  // 64 Битный свободный вирутальный регистр
            RINSTRUCTION__(47)  // 64 Битный свободный вирутальный регистр
            RINSTRUCTION__(48)  // 64 Битный свободный вирутальный регистр
            RINSTRUCTION__(49)  // 64 Битный свободный вирутальный регистр
            RINSTRUCTION__(50)  // 64 Битный свободный вирутальный регистр

            PTR,    // Указывает на то, что данные расположены не в регистре

            ///////////////////////////////////////////
            //////// Байтовый размер следущих данных
            BB1,                        // 1  Байтовая ячейка последующих данных
            BB2,                        // 2  Байтовая ячейка последующих данных
            BB4,                        // 4  Байтовая ячейка последующих данных
            BB8,                        // 8  Байтовая ячейка последующих данных
            BB16,                       // 16 Байтовая ячейка последующих данных
            //////// Битовый размер следущих данных
            B1,B2,B3,B4,B5,B6,B7,B8,B9,B10,B11,B12,
            B13,B14,B15,B16,B17,B18,B19,B20,B21,B22,
            B23,B24,B25,B26,B27,B28,B29,B30,B31,B32,
            B33,B34,B35,B36,B37,B38,B39,B40,B41,B42,
            B43,B44,B45,B46,B47,B48,B49,B50,B51,B52,
            B53,B54,B55,B56,B57,B58,B59,B60,B61,B62,
            B63,B64,
            ///////////////////////////////////////////

            VMCALL,                     // Вызов прерывания виртуальной машины
            SYSCALL,                    // Прямой системный вызов
            ADD,                        // Добавить к данным в ячейке по следующему адресу из ячейки после следующей
            SUB,                        // Вычесть из данных в ячейке по следующему адресу из ячейки после следующей
            DIV,                        // Поделить данные из следующей ячейке на данные в следующей с последствием помещения частного в RAX и остатка в RBX
            MUL,                        // Умножение данных в следующей ячейке на данные из ячейке после следующей
            INC,                        // Инкриментирование данных в следующей ячейке
            DEC,                        // Декриментирование данных в следующей ячейке
            MOV,                        // Копирование данных в следующию ячейку из ячейке после следующей
            PUSH,                       // Сохранение следующих данных в стек
            POP,                        // Выгрузка данных из стека в последующую ячейку
            CMP,                        // Сравнение данных из двух следующих ячеек
            JMP,                        // Безусловный переход
            CALL,                       // Вызов функции с адресом следующей ячейки, с записью адреса возврата в стек
            CALLlbl,                    // Вызов функции по LABEL, с записью адреса возврата в стек
            RET,                        // Возврат из функции по адресу из стека

            /////////Условные переходы
            JE,                         // Перейти если данные равны
            JNE,                        // Перейти если данные не равны

            /////////Операции над знаковыми числами
            JL,                         // Перейти, если меньше
            JLE,                        // Перейти, если меньше или равно
            JG,                         // Перейти, если больше
            JGE,                        // Перейти, если больше или равно
            JNL,                        // Перейти, если больше или равно
            JNLE,                       // Перейти, если больше
            JNG,                        // Перейти, если меньше
            JNGE,                       // Перейти, если меньше или равно

            /////////Операции над беззнаковыми числами
            JB,                         // Перейти, если ниже
            JBE,                        // Перейти, если ниже или равно
            JA,                         // Перейти, если выше
            JAE,                        // Перейти, если выше или равно
            JNB,                        // Перейти, если выше или равно
            JNBE,                       // Перейти, если выше
            JNA,                        // Перейти, если ниже или равно
            JNAE,                       // Перейти, если ниже


            LABEL,                      // Глобальная метка, которая говорит, что далее лежит длина символичной строки и строка, имени загружаемой функции
        };
        class RunTimeRVMApplication;
    }
}

#endif //EVOENGINE_RVM_H
